<?php
require_once 'config.php';
require_once 'functions.php';

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (challenge verification)
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['hub_mode']) && $_GET['hub_mode'] === 'subscribe') {
    // –ü–æ–ª—É—á–∞–µ–º hub.challenge
    $challenge = $_GET['hub_challenge'];

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    log_message('Subscription verification request received: ' . json_encode($_GET));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º hub.challenge –≤ –æ—Ç–≤–µ—Ç
    echo $challenge;
    http_response_code(200); // OK
    exit;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
$rawPostData = file_get_contents('php://input');
$xml = simplexml_load_string($rawPostData);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
if ($xml === false) {
    log_message('Invalid XML received.');
    http_response_code(400);
    exit;
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
log_message('Push notification received: ' . $rawPostData);

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XML
$xml->registerXPathNamespace('yt', 'http://www.w3.org/2005/Atom');
$xml->registerXPathNamespace('at', 'http://www.w3.org/2005/Atom');
$entry = $xml->entry ?? null;
$del_entry = $xml->xpath('//at:deleted-entry')[0] ?? null;
if ($entry == null && $del_entry == null) {
    log_message('No entry found in push notification.');
    http_response_code(204); // –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    exit;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ)
$videoId = (string)$xml->xpath('//yt:videoId')[0] ?? null;
//$channelId = (string)$entry->author->uri ?? null;
$channelId = ((string)$xml->xpath('//yt:channelId')[0] ?? (string)$entry->author->uri) ?? null;
$publishedDate = (string)$entry->published ?? null;

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
$videoTitle = (string)$entry->title ?? null;
$videoLink = (string)$entry->link->attributes()->href ?? null;

if($entry == null && $del_entry != null){
    $videoId = str_replace("yt:video:", "", (string)$del_entry->attributes()->ref) ?? null;
    $channelId = str_replace("https://www.youtube.com/channel/", "", (string)$xml->xpath('//at:by')[0]->uri) ?? null;
}

// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
/*if (strpos($videoTitle, 'LIVE') === false) {
    log_message('This is not a live stream notification, ignoring.');
    http_response_code(204); // –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    exit;
}*/

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–µ —á–µ—Ä–µ–∑ API
//$apiKey = YOUTUBE_API_KEY;
//$videoInfoUrl = "https://www.googleapis.com/youtube/v3/videos?part=snippet,liveStreamingDetails&id={$videoId}&key={$apiKey}";

//$response = make_get_request($videoInfoUrl);
//$videoInfo = json_decode($response, true);
$videoInfo = get_stream_details($videoId);
//log_message("Get user livestream info after callback: " . json_encode($videoInfo['items'][0], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–º–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if (isset($videoInfo)) {
    $liveStreamInfo = $videoDetails = $videoInfo;

    // Load channels list from JSON file
    $channels = load_json('channels.json');
    $channelsHash = hash('sha256', serialize($channels));

    if ($channels === null) {
        log_message("Error: Failed to load channels.json or the file is empty.");
        http_response_code(500);
        exit;
    }

    /*
    $id = null;

    $broadcaster_id = $channelId;

    foreach($channels as $key => $channel){
        if($channel['broadcaster_id'] == $broadcaster_id) {
            $id = $key;
            break;
        }
    }*/

    //$id = array_search($channelId, array_column($channels, 'broadcaster_id'));
    $id = array_keys($channels, $channelId, true)[0] ?? null;

    log_message("Broadcaster: " . $broadcaster_id . ", ID: " . $id);

    if(($liveStreamInfo == null || $del_entry != null) || !isset($liveStreamInfo['viewer_count']) || $videoDetails['liveBroadcastContent'] == "upcoming" || $videoDetails['liveBroadcastContent'] == "none") {
        if(isset($channels[$id]['viewers'])){
            log_message("Offline or can't get info. Set to offline status ".$broadcaster_nickname.' ('.$broadcaster_id.')');
            // Load locale strings list from JSON file
            $locales = load_json('strings.json');
            $broadcastingTime = broadcastCalculatedTime($channels[$id]['startedAt'], date('c'));
            $message = generateStreamMessage($channels[$id], $locales, $liveStreamInfo, $broadcastingTime, "offline");
            unset($channels[$id]['startedAt']);
            unset($channels[$id]['url']);
            unset($channels[$id]['viewers']);

            // Save updated JSON with broadcaster_id and webhook expiration time
            $channelsNewHash = hash('sha256', serialize($channels));
            if ($channelsNewHash != $channelsHash) save_json('channels.json', $channels);

            notify_channels($channels[$id], $message, 'offline', false);
            return;
        } else
        {
            log_message("Stream is not started yet. Skip ".$broadcaster_nickname.' ('.$broadcaster_id.')');
            return;
        }
    }
    
    $notifyAboutOnline = false;
    $locales = null;

    if(!isset($channels[$id]['viewers']) && $liveStreamInfo['viewer_count']){
        $notifyAboutOnline = true;
        // Load locale strings list from JSON file
        $locales = load_json('strings.json');
    }

    $channels[$id]['name'] = $liveStreamInfo['username'];
    $channels[$id]['broadcaster_id'] = $broadcaster_id;
    $channels[$id]['title'] = $liveStreamInfo['title'];
    $channels[$id]['category'] = $liveStreamInfo['category'];
    $channels[$id]['viewers'] = $liveStreamInfo['viewer_count'];
    $channels[$id]['startedAt'] = $liveStreamInfo['start_time'];
    $channels[$id]['url'] = $liveStreamInfo['url'];
    $channels[$id]['language'] = strtolower($liveStreamInfo['country']);

    // Save updated JSON with broadcaster_id and webhook expiration time
    $channelsNewHash = hash('sha256', serialize($channels));
    if ($channelsNewHash != $channelsHash) save_json('channels.json', $channels);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    $channelTitle = $videoDetails['username'];
    $streamTitle = $videoDetails['title'];
    $liveViewers = $videoDetails['viewer_count'] ?? 0;
    $startTime = $videoDetails['start_time'] ?? null;
    $category = $videoDetails['category']; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∏–¥–µ–æ

    /*'username' => $snippet['channelTitle'],  // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–Ω–∞–ª–∞)
    'title' => $snippet['title'],  // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    'category' => $snippet['categoryId'],  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    'viewers' => isset($liveDetails['concurrentViewers']) ? $liveDetails['concurrentViewers'] : '-1',  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π
    'start_time' => $liveDetails['actualStartTime'],  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    'url' => $videoId,  // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
    'country' => isset($snippet['defaultAudioLanguage']) ? $snippet['defaultAudioLanguage'] : null*/

    $broadcastingTime = broadcastCalculatedTime($liveStreamInfo['start_time'], date('c'));

    if($notifyAboutOnline){

        $message = generateStreamMessage($channels[$id], $locales, $videoDetails, $broadcastingTime, "online");

        notify_channels($channels[$id], $message, 'online', true);

    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–µ
    log_message("Live stream detected: Channel - {$channelTitle}, Title - {$streamTitle}, Viewers - {$liveViewers}");

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ —Ç.–¥.
    // –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    /*$message = "üî¥ <b>{$channelTitle}</b> is now live!\n" .
               "<b>Title:</b> {$streamTitle}\n" .
               "<b>Viewers:</b> {$liveViewers}\n" .
               "<b>Watch here:</b> <a href='{$videoLink}'>Click here</a>";*/

    //send_telegram_message(YOUR_CHAT_ID, $message);

    http_response_code(200); // –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    exit;
} else {
    log_message("Failed to retrieve live stream details for videoId: {$videoId}");
    http_response_code(404); // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
    exit;
}
